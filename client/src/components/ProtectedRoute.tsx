import {FC, JSX} from "react";
import {useAuth} from "../hooks/useAuth.ts";
import {Link} from "react-router-dom";
import { ImCancelCircle } from "react-icons/im";

interface Props {
    children: JSX.Element;
    allowedRoles?: string[]; // ‚Üê –ù–æ–≤–æ–µ
}

const ProtectedRoute: FC<Props> = ({children, allowedRoles}) => {
    const isAuth = useAuth();
    const userRole = localStorage.getItem("role"); // –ò–ª–∏ —á–µ—Ä–µ–∑ useContext, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å

    // –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
    if (!isAuth) {
        return (
            <div className="h-screen font-roboto flex justify-center items-center flex-col gap-1">
                <h1 className="text-3xl font-bold text-blue-600">–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω üòê</h1>
                <p className="text-blue-600">–í–∞–º –Ω—É–∂–Ω–æ –≤–æ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç –ø–æ–¥ —Å–≤–æ–µ–π —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å—å—é</p>
                <Link to={'/auth'}
                      className='bg-sky-500 rounded-md px-6 py-2 mt-4 hover:bg-sky-600 shadow-lg shadow-sky-400/90 text-white'>
                    –ü–µ—Ä–µ–π—Ç–∏ –∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                </Link>
            </div>
        );
    }

    // –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –Ω–æ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –ø–æ —Ä–æ–ª–∏
    if (allowedRoles && !allowedRoles.includes(userRole || '')) {
        return (
            <div className="h-screen font-roboto flex justify-center items-center flex-col gap-1">
                <h1 className="text-3xl font-bold text-rose-600">–ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞  </h1>
                <ImCancelCircle size={50} className="text-rose-600 m-2" />
                <p className="text-rose-600">–í–∞—à–∞ —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã</p>
                <Link to={'/'}
                      className='bg-rose-500 rounded-md px-6 py-2 mt-4 hover:bg-rose-600 shadow-lg shadow-rose-400/90 text-white'>
                    –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
                </Link>
            </div>
        );
    }

    // –í—Å—ë —Ö–æ—Ä–æ—à–æ
    return children;
};

export default ProtectedRoute;
