import { FC } from "react";
import logo from "../assets/logotype.jpg";
import { useAppDispatch } from "../store/hooks.ts";
import { Link, useNavigate } from "react-router-dom";
import { AuthService } from "../service/auth.service.ts";
import { setTokenToLocalStorage } from "../helpers/localstorage.helper.ts";
import { toast } from "react-toastify";
import { logan } from "../store/user/userSlice.ts";
import { useAuth } from "../hooks/useAuth.ts";
import PasswordInput from "../components/PasswordInput.tsx";

import { z } from "zod";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";

// –°—Ö–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
const loginSchema = z.object({
    login: z.string().min(3, "–ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞"),
    password: z.string()
        .min(6, "–ú–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤")
        /*.regex(/[a-zA-Z]/, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã")*/
        /*.regex(/[0-9]/, "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Ü–∏—Ñ—Ä–∞")
        .regex(/[^a-zA-Z0-9]/, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø–µ—Ü. —Å–∏–º–≤–æ–ª")*/,
});

type LoginFormData = z.infer<typeof loginSchema>;

const Auth: FC = () => {
    const isAuth = useAuth();
    const dispatch = useAppDispatch();
    const navigate = useNavigate();

    const {
        register,
        handleSubmit,
        formState: { errors },
        setValue,
        watch,
    } = useForm<LoginFormData>({
        resolver: zodResolver(loginSchema),
    });

    const password = watch("password");

    const onSubmit = async (data: LoginFormData) => {
        try {
            const result = await AuthService.login(data);

            if (result) {
                setTokenToLocalStorage("token", result.token);
                if (result.role) {
                    localStorage.setItem("role", result.role);
                }
                dispatch(logan(result));
                toast.success("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ");
                navigate("/");
            }
        } catch (err: any) {
            const error = err.response?.data.message || "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏";
            toast.error(error.toString());
        }
    };

    if (isAuth) {
        return (
            <div className="h-screen font-roboto flex justify-center items-center flex-col gap-1">
                <h1 className="text-3xl font-bold text-blue-600">
                    –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã üòä
                </h1>
                <Link
                    to={"/"}
                    className="bg-sky-500 rounded-md px-6 py-2 mt-4 hover:bg-sky-600 shadow-lg shadow-sky-400/90 text-white"
                >
                    –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á
                </Link>
            </div>
        );
    }

    return (
        <div className="flex justify-center items-center h-full">
            <form
                onSubmit={handleSubmit(onSubmit)}
                className="flex flex-col w-[400px] shadow-xl rounded-2xl bg-white max-md:mt-10 max-md:w-[350px] max-md:h-full pb-5"
            >
                <div className="flex flex-col items-center text-center w-full justify-center">
                    <h1 className="text-xl text-blue-600 mt-2 font-medium">
                        –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    </h1>
                    <img src={logo} alt="" className="h-[200px] w-[200px]" />
                </div>

                <div className="container flex flex-col px-4 gap-2">
                    <input
                        {...register("login")}
                        type="text"
                        className={`py-3 shadow-md border-2 rounded-xl pl-2 outline-blue-500 bg-gray-50 ${errors.login ? 'border-red-500' : ''}`}

                        placeholder="–õ–æ–≥–∏–Ω..."
                        autoComplete="off"
                    />
                    {errors.login && (
                        <p className="text-red-500 text-sm mt-[-6px]">
                            {errors.login.message}
                        </p>
                    )}

                    <PasswordInput
                        value={password}
                        onChange={(e) => setValue("password", e.target.value)}
                        error={errors.password}
                    />

                    <button
                        type="submit"
                        className="text-white py-4 px-1 bg-green-600 rounded-2xl shadow-lg shadow-green-400/80 hover:bg-green-700 mt-3"
                    >
                        –í–æ–π—Ç–∏
                    </button>
                </div>
            </form>
        </div>
    );
};

export default Auth;
